@model Mako.Web.Features.ShiftDetails.CombinedViewModel

@{
    ViewData["Title"] = "Shift Details";
}

<div class="container">
    <div class="d-flex justify-content-center mt-4">
        @Html.Partial("_FilterBar", true)
    </div>
    <div class="row">
        <!-- Left column: Ship Card (same as Shifts view) -->
        <div class="col-md-4">
            @if (Model?.ShipViewModel != null)
            {
                <div class="card card-custom mt-4 shadow">
                    <div class="card-body">
                        <h5 class="card-title fs-3"><b>@Model.ShipViewModel.Name</b> - <i>Time estimation: @(Math.Round(Model.ShipViewModel.TimeEstimation.TotalHours, 1)) hr</i></h5>
                        <div class="d-flex justify-content-between">
                            <p class="card-text fs-5 mb-0">
                                <strong class="fs-4">Pier @Model.ShipViewModel.Pier</strong><br />
                                Arrival: @Model.ShipViewModel.DateArrival.ToShortDateString() <br />
                                Departure: @Model.ShipViewModel.DateDeparture.ToShortDateString()
                            </p>
                            <a href="#" class="card-link mb-1">Cargo Manifest</a>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Right column: Shifts Details -->
        <div class="col-md-8">
            <div class="card card-custom mt-4 shadow">
                <div class="card-body">
                    <p class="fs-2 mb-3 text-center fw-bold">@Model.ShipViewModel.Name - Shifts</p>
                    @if (Model?.ShiftViewModel != null && Model.ShiftViewModel.Any())
                    {
                        <div class="shifts-list">
                            @foreach (var shift in Model.ShiftViewModel)
                            {
                                <div class="shift-item mb-3 p-3 border rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-2 fs-4">
                                        @{
                                            var shiftDateTime = shift.Date.ToDateTime(TimeOnly.MinValue);
                                            var daysUntil = (shiftDateTime - DateTime.UtcNow.Date).Days;
                                            string dayText = daysUntil switch
                                            {
                                                0 => "Today",
                                                1 => "Tomorrow",
                                                _ => $"In {daysUntil} days"
                                            };
                                        }
                                        <span>
                                            <strong>@dayText</strong>
                                            <i class="shift-time" data-shift-id="@shift.Id">
                                                @shift.StartHour.ToString("HH:mm") - @shift.EndHour.ToString("HH:mm")
                                            </i>
                                        </span>
                                        <span class="fs-4"><strong>Pier:</strong> @shift.Pier</span>
                                    </div>

                                    <!-- Workers section -->
                                    <div class="mt-2">
                                        <div class="d-flex align-items-start">
                                            <!-- Workers section with conditional add button -->
                                            <div class="workers-section flex-grow-1">
                                                <strong class="fs-5">Workers</strong>
                                                <div class="d-flex align-items-center gap-2">
                                                    @if (shift.Workers != null && shift.Workers.Any())
                                                    {
                                                        <div class="workers-grid">
                                                            @foreach (var worker in shift.Workers)
                                                            {
                                                                <div class="worker-item text-center position-relative" data-shift-id="@shift.Id" data-worker-cf="@worker.Cf">
                                                                    <form asp-action="RemoveWorkerFromShift" method="post">
																		<input type="hidden" name="shiftId" value="@shift.Id" />
																		<input type="hidden" name="cf" value="@worker.Cf" />
                                                                        <button class="delete-icon">
                                                                            <i class="fas fa-times"></i>
                                                                        </button>
                                                                    </form>
                                                                    <img class="rounded-circle worker-avatar mb-2"
                                                                         src="https://www.gravatar.com/avatar/@(Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(worker.Cf)).ToLower())?s=40&d=identicon"
                                                                         alt="@worker.Name @worker.Surname"
                                                                         width="40"
                                                                         height="40" />
                                                                    <div class="worker-name">@worker.Name @worker.Surname</div>
                                                                </div>
                                                            }
                                                            <!-- Add worker button that shows in edit mode -->
                                                            <div class="add-worker-container d-none">
                                                                <button class="btn btn-sm btn-outline-primary add-worker" data-shift-id="@shift.Id">
                                                                    <i class="fas fa-plus"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <p class="mt-2 me-2">No workers assigned</p>
                                                        <!-- Add worker button that shows in edit mode -->
                                                        <div class="add-worker-container d-none">
                                                            <button class="btn btn-sm btn-outline-primary add-worker" data-shift-id="@shift.Id">
                                                                <i class="fas fa-plus"></i>
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Toggle switch at bottom right -->
                                    <div class="d-flex justify-content-end mt-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input shift-toggle"
                                                   type="checkbox"
                                                   id="shift-toggle-@shift.Id"
                                                   data-shift-id="@shift.Id">
                                            <label class="form-check-label" for="shift-toggle-@shift.Id">Edit</label>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p>No shifts assigned to this ship.</p>
                    }

                    <div class="text-center mt-4">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addShiftModal">
                            Add Shift
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Worker Selection Modal -->
<div class="modal fade" id="workerSelectionModal" tabindex="-1" aria-labelledby="workerSelectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="workerSelectionModalLabel">Select Workers</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Workers List -->
                <div class="workers-selection-list">
                    <!-- Workers will be dynamically inserted here -->
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <form id="addWorkersForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="shiftIdInput" name="shiftId" />
                    <div id="selectedWorkersContainer"></div>
                    <button type="button" class="btn btn-primary" id="addSelectedWorkersBtn">Add Selected Workers</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add Shift Modal -->
<div class="modal fade" id="addShiftModal" tabindex="-1" aria-labelledby="addShiftModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addShiftModalLabel">Add New Shift</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addShiftForm" asp-action="AddShift" asp-controller="ShiftDetails" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="ShipName" value="@Model.ShipViewModel.Name" />
                    <input type="hidden" name="ShipDateArrival" value="@Model.ShipViewModel.DateArrival.ToString("o")" />
                    <input type="hidden" name="Pier" value="@Model.ShipViewModel.Pier" />
                    <div class="mb-3">
                        <label for="shiftDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="shiftDate" name="Date" required>
                    </div>
                    <div class="mb-3">
                        <label for="startTime" class="form-label">Start Time</label>
                        <input type="time" class="form-control" id="startTime" name="StartHour" required>
                    </div>
                    <div class="mb-3">
                        <label for="endTime" class="form-label">End Time</label>
                        <input type="time" class="form-control" id="endTime" name="EndHour" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Shift</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Bootstrap modal
            const workerModal = new bootstrap.Modal(document.getElementById('workerSelectionModal'));
            let currentShiftId = null;

            // Initialize all event listeners
            initializeToggleSwitches();
            initializeTimeEditing();
            initializeWorkerHandling();

            function initializeToggleSwitches() {
                document.querySelectorAll('.shift-toggle').forEach(toggle => {
                    toggle.addEventListener('change', function() {
                        const shiftItem = this.closest('.shift-item');
                        const addWorkerContainer = shiftItem.querySelector('.add-worker-container');

                        if (this.checked) {
                            shiftItem.classList.add('edit-mode');
                            if (addWorkerContainer) {
                                addWorkerContainer.classList.remove('d-none');
                            }
                        } else {
                            shiftItem.classList.remove('edit-mode');
                            if (addWorkerContainer) {
                                addWorkerContainer.classList.add('d-none');
                            }
                            resetTimePicker(shiftItem);
                        }
                    });
                });
            }

            function initializeTimeEditing() {
                document.querySelectorAll('.shift-time').forEach(timeElement => {
                    timeElement.addEventListener('click', function() {
                        const shiftItem = this.closest('.shift-item');
                        if (!shiftItem.classList.contains('edit-mode')) return;

                        if (!this.querySelector('.time-picker-container')) {
                            createTimePicker(this);
                        }
                    });
                });
            }

            function createTimePicker(timeElement) {
                const currentTimes = timeElement.textContent.trim().match(/(\d{2}:\d{2}) - (\d{2}:\d{2})/);
                if (!currentTimes) return;

                const [_, startTime, endTime] = currentTimes;
                timeElement.innerHTML = `
                    <div class="time-picker-container">
                        <input type="time" class="time-picker start-time" value="${startTime}">
                        <span> - </span>
                        <input type="time" class="time-picker end-time" value="${endTime}">
                    </div>
                `;

                const inputs = timeElement.querySelectorAll('input[type="time"]');
                inputs.forEach(input => {
                    input.addEventListener('keypress', e => {
                        if (e.key === 'Enter') saveTimeChanges(timeElement);
                    });
                    input.addEventListener('blur', () => {
                        setTimeout(() => {
                            if (!timeElement.contains(document.activeElement)) {
                                saveTimeChanges(timeElement);
                            }
                        }, 100);
                    });
                });
            }

            function saveTimeChanges(timeElement) {
                const startTime = timeElement.querySelector('.start-time')?.value;
                const endTime = timeElement.querySelector('.end-time')?.value;

                if (startTime && endTime) {
                    timeElement.innerHTML = `${startTime} - ${endTime}`;
                    toastr.success('Time updated successfully');
                }
            }

            function resetTimePicker(shiftItem) {
                const timeElement = shiftItem.querySelector('.shift-time');
                if (timeElement?.querySelector('.time-picker-container')) {
                    const startTime = timeElement.querySelector('.start-time').value;
                    const endTime = timeElement.querySelector('.end-time').value;
                    timeElement.innerHTML = `${startTime} - ${endTime}`;
                }
            }

            function initializeWorkerHandling() {
                // Worker deletion
                document.addEventListener('click', function(e) {
                    if (e.target.closest('.delete-icon')) {
                        handleWorkerDeletion(e);
                    } else if (e.target.closest('.add-worker')) {
                        handleAddWorkerClick(e);
                    }
                });

                // Initialize add selected workers button
                const addSelectedWorkersBtn = document.getElementById('addSelectedWorkersBtn');
                addSelectedWorkersBtn.addEventListener('click', handleAddSelectedWorkers);
            }

            function handleWorkerDeletion(e) {
                e.stopPropagation();
                const workerItem = e.target.closest('.worker-item');
                const shiftItem = workerItem.closest('.shift-item');

                if (!shiftItem.classList.contains('edit-mode')) return;

                workerItem.remove();
                updateWorkersGrid(shiftItem);
                toastr.success('Worker removed from shift');
            }

            function handleAddWorkerClick(e) {
                const button = e.target.closest('.add-worker');
                const shiftItem = button.closest('.shift-item');

                if (!shiftItem.classList.contains('edit-mode')) return;

                currentShiftId = button.dataset.shiftId;
                document.getElementById('shiftIdInput').value = currentShiftId;

                // Clear the modal content before showing
                const workersList = document.querySelector('.workers-selection-list');
                workersList.innerHTML = '';

                // Show modal first so the loading appears in the modal
                workerModal.show();

                // Then load the workers
                loadWorkers();
            }

            function updateWorkersGrid(shiftItem) {
                const workersGrid = shiftItem.querySelector('.workers-grid');
                const remainingWorkers = workersGrid.querySelectorAll('.worker-item').length;

                if (remainingWorkers === 0) {
                    const addWorkerContainer = workersGrid.querySelector('.add-worker-container');
                    workersGrid.innerHTML = '<p class="mt-2 me-2">No workers assigned</p>';
                    if (addWorkerContainer) {
                        workersGrid.appendChild(addWorkerContainer);
                    }
                }
            }

            function createWorkerCard(worker) {
                const listItem = document.createElement('div');
                listItem.className = 'worker-list-item mb-2';

                const card = document.createElement('div');
                card.className = 'card card-custom worker-selectable';
                card.setAttribute('role', 'button');
                card.dataset.cf = worker.cf;

                card.innerHTML = `
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <img class="rounded-circle me-3"
                                 src="https://www.gravatar.com/avatar/${btoa(worker.cf).toLowerCase()}?s=40&d=identicon"
                                 alt="${worker.name} ${worker.surname}"
                                 width="40"
                                 height="40" />
                            <h5 class="card-title mb-0">${worker.name} ${worker.surname}</h5>
                        </div>
                    </div>
                `;

                card.addEventListener('click', () => card.classList.toggle('selected'));

                listItem.appendChild(card);
                return listItem;
            }

            async function loadWorkers() {
                try {
                    const workersList = document.querySelector('.workers-selection-list');

                    // Show loading state
                    workersList.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';

                    const response = await fetch(`/api/workers/free/${currentShiftId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const workers = await response.json();

                    workersList.innerHTML = '';

                    if (workers.length === 0) {
                        workersList.innerHTML = '<div class="alert alert-info">No available workers found for this time slot.</div>';
                        return;
                    }

                    workers.forEach(worker => {
                        const workerCard = createWorkerCard(worker);
                        workersList.appendChild(workerCard);
                    });
                } catch (error) {
                    console.error('Error loading workers:', error);
                    const workersList = document.querySelector('.workers-selection-list');
                    workersList.innerHTML = '<div class="alert alert-danger">Error loading workers. Please try again.</div>';
                    toastr.error('Error loading workers');
                }
            }

            async function handleAddSelectedWorkers(e) {
                e.preventDefault();

                const selectedWorkers = document.querySelectorAll('.worker-selectable.selected');
                const workerCfs = Array.from(selectedWorkers).map(worker => worker.dataset.cf);

                if (workerCfs.length === 0) {
                    toastr.warning('Please select at least one worker');
                    return;
                }

                const formData = new FormData();
                formData.append('shiftId', currentShiftId);
                workerCfs.forEach(cf => formData.append('workerCfs[]', cf));

                try {
                    const response = await fetch('/ShiftDetails/AddWorkerToShift', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    // Update UI with selected workers
                    updateWorkersUI(selectedWorkers);

                    // Close the modal
                    workerModal.hide();

                    toastr.success('Workers added successfully');
                } catch (error) {
                    console.error('Error:', error);
                    toastr.error('Error adding workers to shift');
                }
            }

            function updateWorkersUI(selectedWorkers) {
                const workersGrid = document.querySelector(`[data-shift-id="${currentShiftId}"]`)
                    .closest('.shift-item')
                    .querySelector('.workers-grid');

                // Remove "No workers assigned" message if it exists
                const noWorkersMessage = workersGrid.querySelector('p');
                if (noWorkersMessage) {
                    noWorkersMessage.remove();
                }

                selectedWorkers.forEach(card => {
                    const name = card.querySelector('.card-title').textContent.trim();
                    const cf = card.dataset.cf;

                    // Check if worker isn't already added
                    if (!workersGrid.querySelector(`[data-worker-cf="${cf}"]`)) {
                        const workerItem = createWorkerItem(name, cf);

                        // Insert before the add worker button if it exists
                        const addWorkerContainer = workersGrid.querySelector('.add-worker-container');
                        if (addWorkerContainer) {
                            workersGrid.insertBefore(workerItem, addWorkerContainer);
                        } else {
                            workersGrid.appendChild(workerItem);
                        }
                    }
                });
            }

            function createWorkerItem(name, cf) {
                const workerItem = document.createElement('div');
                workerItem.className = 'worker-item text-center position-relative';
                workerItem.dataset.shiftId = currentShiftId;
                workerItem.dataset.workerCf = cf;

                workerItem.innerHTML = `
                    <div class="delete-icon">
                        <i class="fas fa-times"></i>
                    </div>
                    <img class="rounded-circle worker-avatar mb-2"
                         src="https://www.gravatar.com/avatar/${btoa(cf).toLowerCase()}?s=40&d=identicon"
                         alt="${name}"
                         width="40"
                         height="40" />
                    <div class="worker-name">${name}</div>
                `;

                return workerItem;
            }
        });
    </script>
}